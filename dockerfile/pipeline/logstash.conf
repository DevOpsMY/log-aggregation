input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate_authorities => "/usr/share/logstash/elastic-ca.crt.pem"
    ssl_certificate => "/usr/share/logstash/elastic.crt.pem"
    ssl_key => "/usr/share/logstash/elastic.key.pem"
    ssl_verify_mode => "force_peer"
  }
}

filter {
  mutate {
    add_field => { "[@metadata][pattern_layout]" => "%{[fields][layout]}" }
  }

  if [@metadata][pattern_layout] == "binaries-type1" {
    grok {
      match => { "message" => "\[(%{SPACE})?%{LOGLEVEL:level}(%{SPACE})?\]%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}\[%{DATA:thread}\]%{SPACE}(\[\[\]\]%{SPACE})?((%{JAVAFILE}%{SPACE}-%{SPACE}\[%{NOTSPACE}\]\[%{TIMESTAMP_ISO8601}\]\[%{NOTSPACE}\]%{SPACE}%{JAVAFILE:class}::%{JAVAMETHOD:method})|(%{JAVAFILE:class}))%{SPACE}-%{SPACE}%{GREEDYDATA:msg}" }
    }
  } else if [@metadata][pattern_layout] == "kony" {
    grok {
      match => { "message" => "\[%{JAVAFILE:service}\]\[(%{SPACE})?%{LOGLEVEL:level}(%{SPACE})?\]\[%{TIMESTAMP_ISO8601:timestamp}\]:\[%{DATA:requestid}\]:\[%{DATA:sessionid}\]:\[%{DATA:customfield}\]:\[%{DATA:thread}\]:\[%{JAVAFILE:class}:%{JAVAMETHOD:method}:%{NONNEGINT:line}\]:%{GREEDYDATA:msg}" }
    }
  } else if [@metadata][pattern_layout] in ["jboss"] {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:level}%{SPACE}\[%{JAVAFILE:class}\]%{SPACE}\(%{DATA:thread}\)%{SPACE}%{GREEDYDATA:msg}" }
    }
  } else if [@metadata][pattern_layout] == "binaries-type2" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}\[%{DATA:thread}\]%{SPACE}%{LOGLEVEL:level}%{SPACE}%{JAVAFILE:class}%{SPACE}-%{SPACE}%{GREEDYDATA:msg}" }
    }
  } else if [@metadata][pattern_layout] in ["apache-access"] {
    grok {
      match => { "message" => "%{IPORHOST:clientip}%{SPACE}-%{SPACE}-%{SPACE}\[%{HTTPDATE:timestamp}\]%{SPACE}\"(%{WORD:method}%{SPACE}%{NOTSPACE:url}%{SPACE}(?:%{SPACE}HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\"%{SPACE}%{NUMBER:response}%{SPACE}(%{NUMBER:bytes}|-)" }  
    }
  } else if [@metadata][pattern_layout] in ["apache-error"] {
    grok {
      match => { "message" => "\[%{HTTPDERROR_DATE:timestamp}\]%{SPACE}\[%{WORD:module}:%{LOGLEVEL:level}\]%{SPACE}\[pid%{SPACE}%{POSINT:pid}:tid%{SPACE}%{NUMBER:tid}\](%{SPACE}((%{WORD:mod_module}\.c\(%{POSINT:proxy_errorcode}\))|(\(%{POSINT:proxy_errorcode}\))):%{SPACE}%{DATA:proxy_errormsg}:)?(%{SPACE}\[client%{SPACE}%{IPORHOST:clientip}:%{POSINT:clientport}\])?%{SPACE}(%{WORD:errorcode}:)?%{SPACE}%{GREEDYDATA:msg}" }        
    }
  } else if [@metadata][pattern_layout] == "binaries-type3" {
    mutate {
      gsub => [
        "message", "^=+", ""
      ]
    }
    grok {
      match => { "message" => "%{GREEDYDATA:msg}" }        
    }
  } else if [@metadata][pattern_layout] == "binaries-type4" {
    grok {
      match => {
        "message" => [ 
          "\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}\[%{DATA:thread}\]%{SPACE}\[%{LOGLEVEL:level}\]%{SPACE}(%{JAVAFILE:class}|%{JAVAMETHOD:method}:%{NONNEGINT:line})%{SPACE}-%{SPACE}%{GREEDYDATA:msg}", 
          "%{NOTSPACE}:(%{LOGLEVEL:level})?%{SPACE}%{GREEDYDATA:msg}",
          "%{GREEDYDATA:msg}" 
        ] 
      }
    }
  }

  grok {
    match => [ "[log][file][path]","%{GREEDYDATA}/%{GREEDYDATA:file}" ]
  }

  date {
    match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "yyyy-MM-dd HH:mm:ss,SSS", "yyyy-MM-dd'T'HH:mm:ss.SSSZZ" ]
    timezone => "Asia/Kuala_Lumpur"
    remove_field => "timestamp"
  }
}

output {
  elasticsearch {
    hosts => ["https://elasticsearch01:9200","https://elasticsearch02:9200","https://elasticsearch03:9200"]
    ilm_enabled => true
    ilm_rollover_alias => "<index-name>"
    ilm_pattern => "{now/d{yyyyMMdd}}-00001"
    ilm_policy => "<ilm-policy-name>"
    user => "elastic"
    password => "${ELASTICSEARCH_PASSWORD}"
    ssl => true
    cacert => "/usr/share/logstash/elasticsearch-ca.pem"
  }
}

